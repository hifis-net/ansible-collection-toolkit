---
- name: "Verify unattended upgrades installation"
  hosts: "all"
  vars:
    ubuntu_defaults:
      - 'Unattended-Upgrade::Allowed-Origins:: "${distro_id}:${distro_codename}";'
      - 'Unattended-Upgrade::Allowed-Origins:: "${distro_id}:${distro_codename}-security";'
      - 'Unattended-Upgrade::Allowed-Origins:: "${distro_id}ESMApps:${distro_codename}-apps-security";'
      - 'Unattended-Upgrade::Allowed-Origins:: "${distro_id}ESM:${distro_codename}-infra-security";'
    debian_defaults:
      - 'Unattended-Upgrade::Origins-Pattern:: "origin=Debian,codename=${distro_codename},label=Debian";'

  tasks:
    - name: "Get apt-config variables"
      ansible.builtin.command: "apt-config dump"
      register: "aptconfig"
      changed_when: false

    - name: "Check for registered variables"
      ansible.builtin.assert:
        that: "item in aptconfig.stdout"
      with_items:
        - 'APT::Periodic::Unattended-Upgrade "1"'
        - 'Unattended-Upgrade::Origins-Pattern "";'
        - 'Unattended-Upgrade::AutoFixInterruptedDpkg "false"'
        - 'Unattended-Upgrade::MinimalSteps "true"'
        - 'Unattended-Upgrade::InstallOnShutdown "true"'
        - 'Unattended-Upgrade::Automatic-Reboot "true"'
        # NOTE: this uses the array syntax, which requires one
        # top-level record, then one item per line
        - 'Unattended-Upgrade::Update-Days "";'
        - 'Unattended-Upgrade::Update-Days:: "Sat";'
        - 'Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";'
        - 'Unattended-Upgrade::OnlyOnACPower "true";'
        - 'Unattended-Upgrade::Sender "jane@example.org"'

    - name: "Ubuntu specific verification"
      when: "ansible_facts.distribution == 'Ubuntu'"
      block:
        - name: "Check for registered variables on Ubuntu"
          ansible.builtin.assert:
            that: "item in aptconfig.stdout"
          with_items:
            - 'Unattended-Upgrade::Origins-Pattern:: "origin=Ubuntu,archive=${distro_codename}-security,label=Ubuntu";'

        - name: "Check absence of Ubuntu defaults"
          ansible.builtin.assert:
            that: "item not in aptconfig.stdout"
          with_items: "{{ ubuntu_defaults }}"

    - name: "Debian specific verification"
      when: "ansible_facts.distribution == 'Debian'"
      block:
        - name: "Check for registered variables on Debian"
          ansible.builtin.assert:
            that: "item in aptconfig.stdout"
          with_items:
            - 'Unattended-Upgrade::Origins-Pattern:: "origin=Debian,codename=${distro_codename},label=Debian-Security";'

        - name: "Check absence of Debian defaults"
          ansible.builtin.assert:
            that: "item not in aptconfig.stdout"
          with_items: "{{ debian_defaults }}"

    - name: "Dry run unattended-upgrades"
      ansible.builtin.command: "/usr/bin/unattended-upgrades --dry-run"
      register: "dry_run"
      failed_when: "dry_run.rc != 0"
      changed_when: false

    - name: "Verify custom apt-daily timers"  # noqa command-instead-of-shell
      ansible.builtin.shell:
        cmd: "{{ item }}"
      changed_when: false
      loop:
        - 'systemctl list-timers apt-daily* | grep apt-daily.service | grep "11:08:00"'
        - 'systemctl list-timers apt-daily* | grep apt-daily-upgrade.service | grep "11:31:00"'

...
